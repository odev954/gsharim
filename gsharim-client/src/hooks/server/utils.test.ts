import { removeObjectKeys } from "./utils";
// Generated by CodiumAI

describe("removeObjectKeys", () => {
	// Tests that an empty object with an array of keys to remove returns an empty object
	it("should return an empty object when given an empty object and an array of keys to remove", () => {
		const obj = {};
		const keys = ["key1", "key2"];
		expect(removeObjectKeys(obj, keys)).toEqual({});
	});

	// Tests that a null object returns null
	it("should return null when given a null object and an array of keys to remove", () => {
		const obj = null;
		const keys = ["key1", "key2"];
		expect(removeObjectKeys(obj, keys)).toBeNull();
	});

	// Tests that an undefined object returns undefined
	it("should return undefined when given an undefined object and an array of keys to remove", () => {
		const obj = undefined;
		const keys = ["key1", "key2"];
		expect(removeObjectKeys(obj, keys)).toBeUndefined();
	});

	// Tests that passing an object with a key that does not exist returns the original object
	it("should return the original object when given an object with a key that does not exist and an array of keys to remove", () => {
		const obj = { key1: "value1", key2: "value2" };
		const keys = ["key3"];
		expect(removeObjectKeys(obj, keys)).toEqual(obj);
	});

	// Tests that an object with nested objects and an array of keys to remove returns a new object with the specified keys removed from all nested objects
	it("should return a new object with the specified keys removed from all nested objects when given an object with nested objects and an array of keys to remove", () => {
		const obj = {
			key1: {
				key2: "value2",
				key3: "value3",
			},
			key4: [
				{
					key5: "value5",
					key6: "value6",
				},
				{
					key7: "value7",
					key8: "value8",
				},
			],
		};
		const keys = ["key1.key2", "key4.*.key5"];
		const expectedObj = {
			key1: {
				key3: "value3",
			},
			key4: [
				{
					key6: "value6",
				},
				{
					key7: "value7",
					key8: "value8",
				},
			],
		};
		expect(removeObjectKeys(obj, keys)).toEqual(expectedObj);
	});
});
